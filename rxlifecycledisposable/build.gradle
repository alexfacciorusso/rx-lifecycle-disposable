apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka-android'


android {
    compileSdkVersion projTargetSdkVersion

    defaultConfig {
        minSdkVersion projMinSdkVersion
        targetSdkVersion projTargetSdkVersion
        versionCode projVersionCode
        versionName projVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

group = groupId
version = projVersionName

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    api "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation "org.mockito:mockito-core:2.15.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

repositories {
    mavenCentral()
}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId groupId
                artifactId artifactId

                // Add your description here
                name authorName
                description projDescr
                url projWebsite

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id authorGitUsername
                        name authorName
                        email authorMail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url projWebsite
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"

    skipEmptyPackages = true
    includeNonPublic = false
    skipDeprecated = true
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar

            artifact("$buildDir/outputs/aar/${artifactId}-release.aar") {
                builtBy assemble
            }
            groupId groupId
            artifactId artifactId
            version projVersionName

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    // Get Bintray credential from environment variable
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = authorBintrayUsername
        licenses = [licenseName]
        desc = projDescr
        websiteUrl = projWebsite
        vcsUrl = gitUrl
        publish = true
    }
    publications = ['Production']

}